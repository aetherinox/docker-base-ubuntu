# #
#   @project              Docker Image › Ubuntu Base › Docker-compose.yml
#   @repo                 https://github.com/aetherinox/docker-base-ubuntu
#   @file                 docker-compose.yml
#   @usage                base image utilized for all docker images using Ubuntu with s6-overlay integration
#
#   @image:github         ghcr.io/aetherinox/ubuntu:latest
#                         ghcr.io/aetherinox/ubuntu:24.04
#                         ghcr.io/aetherinox/ubuntu:noble
#                         ghcr.io/aetherinox/ubuntu:noble-YYYYMMDD
#
#   @image:dockerhub      aetherinox/ubuntu:latest
#                         aetherinox/ubuntu:24.04
#                         aetherinox/ubuntu:noble
#                         aetherinox/ubuntu:noble-YYYYMMDD
#
#   @build                AMD64
#                         Build the image with:
#                             docker buildx build \
#                               --build-arg IMAGE_NAME=ubuntu \
#                               --build-arg IMAGE_DISTRO=noble \
#                               --build-arg IMAGE_ARCH=amd64 \
#                               --build-arg IMAGE_BUILDDATE=20260812 \
#                               --build-arg IMAGE_VERSION=24.04 \
#                               --build-arg IMAGE_RELEASE=stable \
#                               --build-arg IMAGE_REGISTRY=github \
#                               --tag aetherinox/ubuntu:latest \
#                               --tag aetherinox/ubuntu:24.04 \
#                               --tag aetherinox/ubuntu:noble \
#                               --tag aetherinox/ubuntu:noble-XXXXXXXX \
#                               --attest type=provenance,disabled=true \
#                               --attest type=sbom,disabled=true \
#                               --output type=docker \
#                               --builder default \
#                               --file Dockerfile \
#                               --platform linux/amd64 \
#                               --allow network.host \
#                               --network host \
#                               --no-cache \
#                               --progress=plain \
#                               .
#
#                         ARM64
#                         For arm64, make sure you install QEMU first in docker; use the command:
#                             docker run --privileged --rm tonistiigi/binfmt --install all
#
#                         Build the image with:
#                             docker buildx build \
#                               --build-arg IMAGE_NAME=ubuntu \
#                               --build-arg IMAGE_DISTRO=noble \
#                               --build-arg IMAGE_ARCH=arm64 \
#                               --build-arg IMAGE_BUILDDATE=20260812 \
#                               --build-arg IMAGE_VERSION=24.04 \
#                               --build-arg IMAGE_RELEASE=stable \
#                               --build-arg IMAGE_REGISTRY=github \
#                               --tag aetherinox/ubuntu:latest \
#                               --tag aetherinox/ubuntu:24.04 \
#                               --tag aetherinox/ubuntu:noble \
#                               --tag aetherinox/ubuntu:noble-XXXXXXXX \
#                               --attest type=provenance,disabled=true \
#                               --attest type=sbom,disabled=true \
#                               --output type=docker \
#                               --builder default \
#                               --file Dockerfile \
#                               --platform linux/arm64 \
#                               --allow network.host \
#                               --network host \
#                               --no-cache \
#                               --progress=plain \
#                               .
# #

services:

    # #
    #   Service › Ubuntu › Noble
    # #

    base-ubuntu-noble:
        container_name: base-ubuntu-noble
        image: aetherinox/ubuntu:noble
        hostname: noble
        environment:
            - TZ=Etc/UTC
        volumes:
            - /etc/timezone:/etc/timezone:ro
            - /etc/localtime:/etc/localtime:ro
            - /var/run/docker.sock:/var/run/docker.sock
        ulimits:
            memlock:
                soft: -1
                hard: -1
        networks:
            traefik:
                ipv4_address: '172.18.75.1'

# #
#   Networks
#
#   docker network create --driver=bridge --subnet=172.18.0.0/16 --gateway=172.18.0.1 traefik
# #

networks:
    traefik:
        name: traefik
        external: true
